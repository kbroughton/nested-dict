1) Dictionaries with mixed depth of nested levels:

(Only works well for scalars)


	nd= nested_dict()                                   
	nd["mouse"]["chr1"]["+"] = 311                      
	nd["mouse"]["chromosomes"]="completed"              
	nd["mouse"]["chr2"] = "2nd longest"                             
	nd["mouse"]["chr3"] = "3rd longest"                 
	nd["human_chromosomes"] = "to be done"


2) Dictionaries with pre-determined levels of nesting, and type of the contained value:

(Especially useful for containers)

	# two levels of nesting
	nd2 = nested_dict(2, list)
	nd2["mouse"]["chr2"].append(12)
	
	# three levels of nesting
	nd3 = nested_dict(3, set)
	nd3["mouse"]["chr2"]["categorised"].add(3)
	
	# counts
	nd4 = nested_dict(2, int)
	nd4["mouse"]["chr2"]+=4
	nd4["human"]["chr1"]+=3
	nd4["human"]["chr3"]+=4

3) Dictionaries with lists or sets (or arbitrary objects) can have custom combine_policies:


	> nd1 = nested_dict({'a':1,'f':[1,3]})
	> nd2 = nested_dict({'a':1,'f':[1,2]})
	
	# use built-in combine_policy to merge lists
	> nd1.update(nd2, combine_policies=['uniquely_extend_list'])
	{'a':1,'f':[1,3,2]}
	
Here we are using the built-in combine_policy_options.  
If your dict contains structures you may specify which ones update() will use with the combine_policies kwarg (list).
You may also supply your own combine_policy_options kwarg (list)

	default_combine_policy_options=[
				  {'name': 'uniquely_extend_list', 'signature': (list,list), 
                   'combiner': lambda x,y: x + list(set(y) - set(x)) },
                  
                  {'name': 'list_of_union', 'signature': (list,list), 
                   'combiner': lambda x,y: list(set(y) + set(x)) },
                  
                  {'name': 'symmetric_difference', 'signature': (set,set),
                   'combiner': lambda x,y: x.symmetric_difference(y)},
                   ]

Here is an example of creating your own useful combiner

	    > combine_policy_options=[
                  {'name': 'rabbits', 'signature': (list,list), 
                   'combiner': lambda x,y: 'look rabbits' }]
        > nd1 = nested_dict.nested_dict({'a':1,'f':[1,3,3]})
        > nd2 = nested_dict.nested_dict({'a':1,'f':[1,2]})
        > nd1.update(nd2,
                   combine_policies=['rabbits'],                               combine_plicy_options=combine_policy_options)
        {'a':1,'f':'look rabbits'})